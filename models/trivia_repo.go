package models

import (
	"errors"
	"goparse/Godeps/_workspace/src/gopkg.in/mgo.v2/bson"
	"goparse/connection"
	"log"
	"time"
	// "fmt"
)

func (object *Trivia) Create() error {

	c, session := connection.GetCollection("trivias")
	defer session.Close()
	currentTime := time.Now()
	// This guarantees that t.Id has the bson _id generated by mongo
	// Although we are using a reference to object, we do not need to dereference object
	object.Id = bson.NewObjectId()
	object.CreatedAt = currentTime
	object.UpdatedAt = currentTime

	err := c.Insert(object)
	if err != nil {
		log.Fatal(err)
		return err

	}
	return err
}

func (object Trivia) Find(id string) (Trivia, error) {

	c, session := connection.GetCollection("trivias")
	defer session.Close()
	result := Trivia{}
	if bson.IsObjectIdHex(id) {
		err := c.FindId(bson.ObjectIdHex(id)).One(&result)
		// _ = "breakpoint"
		if err != nil {
			// Return empty Trivia object and err if there is an error
			return Trivia{}, err
		}
	} else {
		err := errors.New("Invalid id")

		return Trivia{}, err
	}
	return result, nil
}

func (object Trivia) Query(query bson.M) ([]interface{}, error) {

	c, session := connection.GetCollection("trivias")
	defer session.Close()
	var results []interface{}
	err := c.Find(query).All(&results)
	// _ = "breakpoint"
	if err != nil {
		// Return empty object and err if there is an error
		return results, err
	}

	if len(results) == 0 {
		return results, errors.New("Record not found")
	} else {
		return results, err
	}
}

func (object Trivia) Destroy(id string) error {

	c, session := connection.GetCollection("trivias")
	defer session.Close()
	return c.Remove(bson.M{"_id": bson.ObjectIdHex(id)})
}

func (object Trivia) Update(id string, doc bson.M) (Trivia, error) {
	if bson.IsObjectIdHex(id) {
		c, session := connection.GetCollection("trivias")
		defer session.Close()
		query := bson.M{"_id": bson.ObjectIdHex(id)}
		doc["$set"].(bson.M)["updated_at"] = time.Now()
		err := c.Update(query, doc)
		// Upon successful update, we retrive the updated object
		// from db and return it. WARNING: this is an additional query
		if err == nil {
			return Trivia{}.Find(id)
		} else {
			return Trivia{}, err
		}
	}
	return Trivia{}, errors.New("Invalid id")
}
